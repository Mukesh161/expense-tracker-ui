import React, { useState, useEffect } from 'react'

const API_BASE_URL = 'http://localhost:8080/api/v1';
const COLORS = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEEAD', '#D4A5A5', '#9EA1D4'];

function PieChart({ data, size=240 }){
  if (!data || data.length === 0) {
    return (
      <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`} className="chart-svg">
        <text x={size/2} y={size/2} textAnchor="middle" fill="var(--text)" fontSize="14">
          No data available
        </text>
      </svg>
    );
  }

  const total = data.reduce((s,d)=>s+d.value,0);
  let angle = -Math.PI/2;
  const cx = size/2, cy = size/2, r = size/2 - 20;

  return (
    <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`} className="chart-svg">
      {data.map((d,i)=>{
        const frac = d.value/total;
        const delta = frac * Math.PI * 2;
        const x1 = cx + r * Math.cos(angle);
        const y1 = cy + r * Math.sin(angle);
        angle += delta;
        const x2 = cx + r * Math.cos(angle);
        const y2 = cy + r * Math.sin(angle);
        const large = delta > Math.PI ? 1 : 0;
        const path = `M ${cx} ${cy} L ${x1} ${y1} A ${r} ${r} 0 ${large} 1 ${x2} ${y2} Z`;
        return <path key={d.key} d={path} fill={d.color} stroke="var(--border)" strokeWidth="2" />;
      })}
      <text x={cx} y={cy} textAnchor="middle" fill="var(--text)" fontSize="14">
        Total: ${total.toFixed(2)}
      </text>
    </svg>
  );
}

function BarChart({ data, width=400, height=200 }){
  if (!data || data.length === 0) {
    return (
      <svg width={width} height={height} viewBox={`0 0 ${width} ${height}`} className="chart-svg">
        <text x={width/2} y={height/2} textAnchor="middle" fill="var(--text)" fontSize="14">
          No data available
        </text>
      </svg>
    );
  }

  const maxValue = Math.max(...data.map(d => Math.max(d.credit || 0, d.debit || 0)), 1);
  const bw = Math.floor(width / data.length);
  const chartHeight = height - 40;
  
  return (
    <svg width={width} height={height} viewBox={`0 0 ${width} ${height}`} className="chart-svg">
      {/* Y-axis gridlines and labels */}
      {[0, 0.25, 0.5, 0.75, 1].map(tick => {
        const y = chartHeight - (tick * chartHeight) + 20;
        return (
          <g key={tick}>
            <line 
              x1="0" 
              y1={y} 
              x2={width} 
              y2={y} 
              stroke="var(--border)" 
              strokeWidth="1" 
              opacity="0.2"
            />
            <text 
              x="0" 
              y={y} 
              fill="var(--text)" 
              fontSize="12" 
              dominantBaseline="middle"
            >
              ${(tick * maxValue).toFixed(0)}
            </text>
          </g>
        );
      })}
      
      {/* Bars */}
      {data.map((d,i) => {
        const x = i * bw;
        const creditHeight = ((d.credit || 0) / maxValue) * chartHeight;
        const debitHeight = ((d.debit || 0) / maxValue) * chartHeight;
        return (
          <g key={d.key} transform={`translate(${x + bw/4}, 20)`}>
            {/* Credit bar */}
            <rect
              width={bw/3}
              height={creditHeight}
              y={chartHeight - creditHeight}
              fill="var(--income)"
              opacity="0.8"
            />
            {/* Debit bar */}
            <rect
              width={bw/3}
              height={debitHeight}
              x={bw/3}
              y={chartHeight - debitHeight}
              fill="var(--expense)"
              opacity="0.8"
            />
            {/* X-axis label */}
            <text
              x={bw/3}
              y={chartHeight + 15}
              textAnchor="middle"
              fill="var(--text)"
              fontSize="12"
            >
              {d.key}
            </text>
          </g>
        );
      })}
    </svg>
  );
}

export default function Analytics() {
  const [transactions, setTransactions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchTransactions();
  }, []);

  const fetchTransactions = async () => {
    try {
      console.log('Fetching transactions...');
      const response = await fetch(`${API_BASE_URL}/transactions`);
      if (!response.ok) {
        throw new Error('Failed to fetch transactions');
      }
      const data = await response.json();
      console.log('Fetched transactions:', data);
      setTransactions(data);
    } catch (err) {
      console.error('Error fetching transactions:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  // Process the data for visualization
  const processData = () => {
    // Separate credit and debit transactions
    const creditTransactions = transactions.filter(t => t.type === 'CREDIT');
    const debitTransactions = transactions.filter(t => t.type === 'DEBIT');

    // Calculate category totals for credits
    const creditCategories = creditTransactions.reduce((acc, t) => {
      const cat = t.category || 'Uncategorized';
      acc[cat] = (acc[cat] || 0) + Number(t.amount);
      return acc;
    }, {});

    // Calculate category totals for debits
    const debitCategories = debitTransactions.reduce((acc, t) => {
      const cat = t.category || 'Uncategorized';
      acc[cat] = (acc[cat] || 0) + Number(t.amount);
      return acc;
    }, {});

    // Prepare pie chart data
    const creditPieData = Object.entries(creditCategories)
      .map(([k, v], i) => ({
        key: k,
        value: v,
        color: COLORS[i % COLORS.length]
      }))
      .filter(d => d.value > 0);

    const debitPieData = Object.entries(debitCategories)
      .map(([k, v], i) => ({
        key: k,
        value: v,
        color: COLORS[i % COLORS.length]
      }))
      .filter(d => d.value > 0);

    // Calculate monthly trends
    const byMonth = transactions.reduce((acc, t) => {
      const date = new Date(t.date);
      const key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
      if (!acc[key]) {
        acc[key] = { credit: 0, debit: 0 };
      }
      if (t.type === 'CREDIT') {
        acc[key].credit += Number(t.amount);
      } else {
        acc[key].debit += Number(t.amount);
      }
      return acc;
    }, {});

    // Prepare bar chart data
    const barData = Object.entries(byMonth)
      .sort((a, b) => a[0].localeCompare(b[0]))
      .slice(-6)
      .map(([k, v]) => ({
        key: k,
        credit: v.credit,
        debit: v.debit
      }));

    return {
      creditPieData,
      debitPieData,
      barData
    };
  };

  if (loading) {
    return <div className="panel">Loading analytics data...</div>;
  }

  if (error) {
    return <div className="panel error">Error: {error}</div>;
  }

  const { creditPieData, debitPieData, barData } = processData();

  return (
    <div className="panel">
      <h3>Analytics</h3>
      <div className="charts">
        <section className="chart-section">
          <h4>Income by Category</h4>
          <div className="chart-container">
            <PieChart data={creditPieData} />
            <div className="legend">
              {creditPieData.map(d => (
                <div key={d.key} className="legend-item">
                  <span className="legend-color" style={{backgroundColor: d.color}}></span>
                  <span className="legend-key">{d.key}</span>
                  <span className="legend-value credit">+${d.value.toFixed(2)}</span>
                </div>
              ))}
            </div>
          </div>
        </section>

        <section className="chart-section">
          <h4>Expenses by Category</h4>
          <div className="chart-container">
            <PieChart data={debitPieData} />
            <div className="legend">
              {debitPieData.map(d => (
                <div key={d.key} className="legend-item">
                  <span className="legend-color" style={{backgroundColor: d.color}}></span>
                  <span className="legend-key">{d.key}</span>
                  <span className="legend-value debit">-${d.value.toFixed(2)}</span>
                </div>
              ))}
            </div>
          </div>
        </section>

        <section className="chart-section full-width">
          <h4>Monthly Trends</h4>
          <div className="chart-container">
            <BarChart data={barData} />
            <div className="legend">
              <div className="legend-item">
                <span className="legend-color" style={{backgroundColor: 'var(--income)'}}></span>
                <span className="legend-key">Income</span>
              </div>
              <div className="legend-item">
                <span className="legend-color" style={{backgroundColor: 'var(--expense)'}}></span>
                <span className="legend-key">Expenses</span>
              </div>
            </div>
          </div>
        </section>
      </div>
    </div>
  );
}